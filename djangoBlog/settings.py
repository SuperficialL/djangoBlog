"""
Django settings for djangoBlog project.

Generated by 'django-admin startproject' using Django 2.1.7.

For more information on this file, see
https://docs.djangoproject.com/en/2.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/2.1/ref/settings/
"""

import os
import sys
import socket

# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

sys.path.insert(0, os.path.join(BASE_DIR, 'apps'))

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/2.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = '#^z=ncuc)8az8$d*k2#m-k7ae^pqp=3o_f1_*a$s8a)leevz@e'

# SECURITY WARNING: don't run with debug turned on in production!
# 通过判断主机ip来实现是否开启debug模式
if socket.gethostbyname(socket.gethostname())[:3] == '192':
    DEBUG = True
    ALLOWED_HOSTS = ['127.0.0.1', '192.168.2.113']
else:
    DEBUG = False
    ALLOWED_HOSTS = ['www.zhangwurui.com', 'zhangwurui.com']

# Application definition
INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'django.contrib.sitemaps',
    'django.contrib.sites'
]

# 个人应用
PERSONAL_APPS = [
    'apps.blog.apps.BlogConfig',
    'apps.comments.apps.CommentConfig',
    'apps.accounts.apps.AccountsConfig',
]

# 添加站点,用于生产xml站点地图

# 第三方应用
EXTRA_APPS = [
    'mdeditor',
]

INSTALLED_APPS += PERSONAL_APPS + EXTRA_APPS

SITE_ID = 1

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # 增加404错误中间件
    'django.middleware.common.BrokenLinkEmailsMiddleware'
]

ROOT_URLCONF = 'djangoBlog.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'apps.blog.custom_processors.global_variable',
            ],
            'builtins': [
                'django.templatetags.static',
            ]
        },
    },
]

WSGI_APPLICATION = 'djangoBlog.wsgi.application'

# Database
# https://docs.djangoproject.com/en/2.1/ref/settings/#databases
DATABASES = {
    # 'default': {
    #     'ENGINE': 'django.db.backends.sqlite3',
    #     'NAME': 'db.sqlite3',
    # }
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'web',
        'USER': 'root',
        'PASSWORD': '950312',
        'PORT': '3306'
    }
}

# Password validation
# https://docs.djangoproject.com/en/2.1/ref/settings/#auth-password-validators

# 用户模型
AUTH_USER_MODEL = 'accounts.OAuth'

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/2.1/topics/i18n/

LANGUAGE_CODE = 'zh-hans'

TIME_ZONE = 'Asia/Shanghai'

USE_I18N = True
# 国际化,支持多种语言

USE_L10N = True

USE_TZ = False

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/2.1/howto/static-files/
# 设置静态文件路径
STATIC_URL = '/static/'
# 部署网站时搜集静态文件
# STATIC_ROOT = os.path.join(BASE_DIR, 'static')

# 地理位置数据库
GEOIP_PATH = os.path.join(BASE_DIR, 'static/real_address/GeoLite2-City.mmdb')

# 搜集静态文件时要注释 STATICFILES_DIRS
STATICFILES_DIRS = (
    os.path.join(BASE_DIR, 'static').replace('\\', '/'),
)

# 设置文件上传路径
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media').replace('\\', '/')

# 邮件信息配置
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = False
# 是否使用TLS安全传输协议(用于在两个通信应用程序之间提供保密性和数据完整性。)
EMAIL_HOST = 'smtp.163.com'
# 发送邮件的邮箱 的 SMTP 服务器，这里用了163邮箱
EMAIL_PORT = 25
# 发件箱的SMTP服务器端口
SERVER_EMAIL = EMAIL_HOST_USER = '15871930413@163.com'
# 发送邮件的邮箱地址
EMAIL_HOST_PASSWORD = 'zrui950312'
# 发送邮件的邮箱密码(这里使用的是授权码)
# 将请求/响应周期中引发的异常的详细信息发送邮箱配置
ADMINS = [('Superficial', '15871930413@163.com'), ]
SEND_BROKEN_LINK_EMAILS = True
MANAGERS = ADMINS

# 增加自定义后套验证路径
AUTHENTICATION_BACKENDS = (
    'accounts.backends.CustomBackend',
)
# 创建日志路径
LOG_PATH = os.path.join(BASE_DIR, 'log')

if not os.path.isdir(LOG_PATH):
    # 如果地址不存在,则自动创建log文件夹
    os.mkdir(LOG_PATH)

LOGGING = {
    # version 值只能为1
    'version': 1,
    # True 表示禁用loggers
    'disable_existing_loggers': False,
    # 日志格式化集合
    'formatters': {
        'verbose': {
            # [具体时间][日志名字:日志级别名称] [输出的模块:输出的函数]:日志内容
            'format': '[%(asctime)s] [%(name)s:%(levelname)s] [%(module)s:%(funcName)s]:%(message)s'
        }
    },
    # 过滤器
    'filters': {
        # debug=False
        'require_debug_false': {
            '()': 'django.utils.log.RequireDebugFalse',
        },
        # debug=True
        'require_debug_true': {
            '()': 'django.utils.log.RequireDebugTrue',
        },
    },
    # 处理器
    'handlers': {
        # 输出到控制台
        'console': {
            'level': 'DEBUG',
            # 输出信息的最低级别
            'class': 'logging.StreamHandler',
            # 'filters': ['require_debug_true'],
            # 仅当 DEBUG = True 该处理器才生效
            # 指定保存格式
            'formatter': 'verbose'
        },
        'error': {
            'level': 'ERROR',
            'class': 'logging.handlers.RotatingFileHandler',
            # 保存到文件，自动切
            'filename': os.path.join(BASE_DIR, "djangoBlog_err.log"),
            # 日志文件
            'maxBytes': 1024 * 1024 * 50,
            # 日志大小 50M
            'backupCount': 5,
            'formatter': 'verbose',
            'encoding': 'utf-8',
        },
        # 输出到文件
        'log_file': {
            'level': 'DEBUG',
            # 若日志超过指定文件的大小，会再生成一个新的日志文件保存日志信息
            'class': 'logging.handlers.RotatingFileHandler',
            # 指定保存格式
            'formatter': 'verbose',
            # 指定文件大小 5M
            'maxBytes': 5 * 1024 * 1024,
            # 文件编码
            'encoding': 'utf8',
            # 文件地址
            'filename': '%s/djangoblog_debug.log' % LOG_PATH,
        },
        'mail_admins': {
            'level': 'ERROR',
            'filters': ['require_debug_false'],
            'class': 'django.utils.log.AdminEmailHandler',
            'include_html': True
        },
        'null': {
            'level': 'DEBUG',
            'class': 'logging.NullHandler',
        },
    },
    # 日志管理器
    'loggers': {
        # 管理器
        'django': {
            'handlers': ['console', 'log_file'],
            'level': 'INFO',
            'propagate': False,
        },
        'django.request': {
            'handlers': ['mail_admins', 'log_file', 'console'],
            'level': 'ERROR',
            'propagate': True,
        },
        # 对于不在 ALLOWED_HOSTS 中的请求不发送报错邮件
        'django.security.DisallowedHost': {
            'handlers': ['null'],
            'propagate': False,
        },
    }
}
